/**
 *
 * Create items' width cache as we're going to need these numbers 
 * many times when generating breakpoints
 *
 */

$width-cache: (
);

@for $i from 1 through $grid-size {
	$width-cache: map-merge($width-cache, ($i: span($i of $grid-size)));
}

/**
 *
 * Create the container classes for our spanned elements:
 * Put everything inside .grow-container and add as many .grow (our name for row)
 * with as many .grow-item-[BREAKPOINT]-[SIZE] as you want 
 *
 */

.grow-container-nopadding {
	width: 100%;
	display: block;
}

.grow-container {
	padding-left: $container-padding;
	padding-right: $container-padding;
	margin-left: auto;
	margin-right: auto;

	&.constrained {	
		@include container();
	}
}

.grow {
	@include clearfix();
	margin-left: - gutter();
	margin-right: - gutter();
}

/**
 *
 * The .grow-item itself
 *
 */

[class*="grow-item"] {
	@include gutters();
	box-sizing: border-box;
}

@each $label, $map in $bp {
	
	$min_width: map-get($map, 'min-width');

	@if $min_width {
		@include breakpoint( map-get($map, 'min-width') ) {
			@for $i from 1 through $grid-size {
				.grow-item-#{$label}-#{$i} {		
					width: map-get($width-cache, $i);
					float: left;
				}
			}
		}
	}

	@else {
		@for $i from 1 through $grid-size {
			.grow-item-#{$label}-#{$i} {
				width: map-get($width-cache, $i);
				float: left;
			}
		}
	}

}